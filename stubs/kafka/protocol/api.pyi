import abc
from kafka.protocol.struct import Struct as Struct
from kafka.protocol.types import Array as Array, Int16 as Int16, Int32 as Int32, Schema as Schema, String as String
from typing import Any

class RequestHeader(Struct):
    SCHEMA: Any = ...
    def __init__(self, request: Any, correlation_id: int = ..., client_id: str = ...) -> None: ...

class Request(Struct, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @property
    @abc.abstractmethod
    def API_KEY(self) -> Any: ...
    @property
    @abc.abstractmethod
    def API_VERSION(self) -> Any: ...
    @property
    @abc.abstractmethod
    def SCHEMA(self) -> Any: ...
    @property
    @abc.abstractmethod
    def RESPONSE_TYPE(self) -> Any: ...
    def expect_response(self): ...
    def to_object(self): ...

class Response(Struct, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @property
    @abc.abstractmethod
    def API_KEY(self) -> Any: ...
    @property
    @abc.abstractmethod
    def API_VERSION(self) -> Any: ...
    @property
    @abc.abstractmethod
    def SCHEMA(self) -> Any: ...
    def to_object(self): ...
