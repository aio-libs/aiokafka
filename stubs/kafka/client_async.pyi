from kafka.cluster import ClusterMetadata as ClusterMetadata
from kafka.conn import BrokerConnection as BrokerConnection, ConnectionStates as ConnectionStates, collect_hosts as collect_hosts, get_ip_port_afi as get_ip_port_afi
from kafka.future import Future as Future
from kafka.metrics import AnonMeasurable as AnonMeasurable
from kafka.metrics.stats import Avg as Avg, Count as Count, Rate as Rate
from kafka.metrics.stats.rate import TimeUnit as TimeUnit
from kafka.protocol.metadata import MetadataRequest as MetadataRequest
from kafka.vendor import socketpair as socketpair
from typing import Any, Optional

log: Any

class KafkaClient:
    DEFAULT_CONFIG: Any = ...
    config: Any = ...
    cluster: Any = ...
    def __init__(self, **configs: Any) -> None: ...
    def maybe_connect(self, node_id: Any, wakeup: bool = ...): ...
    def ready(self, node_id: Any, metadata_priority: bool = ...): ...
    def connected(self, node_id: Any): ...
    def close(self, node_id: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...
    def is_disconnected(self, node_id: Any): ...
    def connection_delay(self, node_id: Any): ...
    def is_ready(self, node_id: Any, metadata_priority: bool = ...): ...
    def send(self, node_id: Any, request: Any, wakeup: bool = ...): ...
    def poll(self, timeout_ms: Optional[Any] = ..., future: Optional[Any] = ...): ...
    def in_flight_request_count(self, node_id: Optional[Any] = ...): ...
    def least_loaded_node(self): ...
    def set_topics(self, topics: Any): ...
    def add_topic(self, topic: Any): ...
    def get_api_versions(self): ...
    def check_version(self, node_id: Optional[Any] = ..., timeout: int = ..., strict: bool = ...): ...
    def wakeup(self) -> None: ...
    def bootstrap_connected(self): ...

class IdleConnectionManager:
    connections_max_idle: Any = ...
    next_idle_close_check_time: Any = ...
    lru_connections: Any = ...
    def __init__(self, connections_max_idle_ms: Any) -> None: ...
    def update(self, conn_id: Any) -> None: ...
    def remove(self, conn_id: Any) -> None: ...
    def is_expired(self, conn_id: Any): ...
    def next_check_ms(self): ...
    def update_next_idle_close_check_time(self, ts: Any) -> None: ...
    def poll_expired_connection(self): ...

class KafkaClientMetrics:
    metrics: Any = ...
    metric_group_name: Any = ...
    connection_closed: Any = ...
    connection_created: Any = ...
    select_time: Any = ...
    io_time: Any = ...
    def __init__(self, metrics: Any, metric_group_prefix: Any, conns: Any): ...
