from collections import namedtuple
from kafka.future import Future as Future
from typing import Any, Optional

class FutureProduceResult(Future):
    topic_partition: Any = ...
    def __init__(self, topic_partition: Any) -> None: ...
    def success(self, value: Any): ...
    def failure(self, error: Any): ...
    def wait(self, timeout: Optional[Any] = ...): ...

class FutureRecordMetadata(Future):
    args: Any = ...
    def __init__(self, produce_future: Any, relative_offset: Any, timestamp_ms: Any, checksum: Any, serialized_key_size: Any, serialized_value_size: Any, serialized_header_size: Any) -> None: ...
    def get(self, timeout: Optional[Any] = ...): ...

RecordMetadata = namedtuple('RecordMetadata', ['topic', 'partition', 'topic_partition', 'offset', 'timestamp', 'checksum', 'serialized_key_size', 'serialized_value_size', 'serialized_header_size'])
