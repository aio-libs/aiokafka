from kafka.metrics.measurable_stat import AbstractMeasurableStat as AbstractMeasurableStat
from kafka.metrics.stats.sampled_stat import AbstractSampledStat as AbstractSampledStat
from typing import Any, Optional

class TimeUnit:
    NANOSECONDS: Any = ...
    MICROSECONDS: Any = ...
    MILLISECONDS: Any = ...
    SECONDS: Any = ...
    MINUTES: Any = ...
    HOURS: Any = ...
    DAYS: Any = ...
    @staticmethod
    def get_name(time_unit: Any): ...

class Rate(AbstractMeasurableStat):
    def __init__(self, time_unit: Any = ..., sampled_stat: Optional[Any] = ...) -> None: ...
    def unit_name(self): ...
    def record(self, config: Any, value: Any, time_ms: Any) -> None: ...
    def measure(self, config: Any, now: Any): ...
    def window_size(self, config: Any, now: Any): ...
    def convert(self, time_ms: Any): ...

class SampledTotal(AbstractSampledStat):
    def __init__(self, initial_value: Optional[Any] = ...) -> None: ...
    def update(self, sample: Any, config: Any, value: Any, time_ms: Any) -> None: ...
    def combine(self, samples: Any, config: Any, now: Any): ...
