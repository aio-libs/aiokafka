from kafka.metrics import AnonMeasurable as AnonMeasurable, NamedMeasurable as NamedMeasurable
from kafka.metrics.compound_stat import AbstractCompoundStat as AbstractCompoundStat
from kafka.metrics.stats import Histogram as Histogram
from kafka.metrics.stats.sampled_stat import AbstractSampledStat as AbstractSampledStat
from typing import Any, Optional

class BucketSizing:
    CONSTANT: int = ...
    LINEAR: int = ...

class Percentiles(AbstractSampledStat, AbstractCompoundStat):
    bin_scheme: Any = ...
    def __init__(self, size_in_bytes: Any, bucketing: Any, max_val: Any, min_val: float = ..., percentiles: Optional[Any] = ...) -> None: ...
    def stats(self): ...
    def value(self, config: Any, now: Any, quantile: Any): ...
    def combine(self, samples: Any, config: Any, now: Any): ...
    def new_sample(self, time_ms: Any): ...
    def update(self, sample: Any, config: Any, value: Any, time_ms: Any) -> None: ...
    class HistogramSample(AbstractSampledStat.Sample):
        histogram: Any = ...
        def __init__(self, scheme: Any, now: Any) -> None: ...
