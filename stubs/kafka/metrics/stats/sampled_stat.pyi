import abc
from kafka.metrics.measurable_stat import AbstractMeasurableStat as AbstractMeasurableStat
from typing import Any

class AbstractSampledStat(AbstractMeasurableStat, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def __init__(self, initial_value: Any) -> None: ...
    @abc.abstractmethod
    def update(self, sample: Any, config: Any, value: Any, time_ms: Any) -> Any: ...
    @abc.abstractmethod
    def combine(self, samples: Any, config: Any, now: Any) -> Any: ...
    def record(self, config: Any, value: Any, time_ms: Any) -> None: ...
    def new_sample(self, time_ms: Any): ...
    def measure(self, config: Any, now: Any): ...
    def current(self, time_ms: Any): ...
    def oldest(self, now: Any): ...
    def purge_obsolete_samples(self, config: Any, now: Any) -> None: ...
    class Sample:
        initial_value: Any = ...
        event_count: int = ...
        last_window_ms: Any = ...
        value: Any = ...
        def __init__(self, initial_value: Any, now: Any) -> None: ...
        def reset(self, now: Any) -> None: ...
        def is_complete(self, time_ms: Any, config: Any): ...
