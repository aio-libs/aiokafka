import abc
from typing import Any, Optional

class ABCRecord(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @property
    @abc.abstractmethod
    def offset(self) -> Any: ...
    @property
    @abc.abstractmethod
    def timestamp(self) -> Any: ...
    @property
    @abc.abstractmethod
    def timestamp_type(self) -> Any: ...
    @property
    @abc.abstractmethod
    def key(self) -> Any: ...
    @property
    @abc.abstractmethod
    def value(self) -> Any: ...
    @property
    @abc.abstractmethod
    def checksum(self) -> Any: ...
    @property
    @abc.abstractmethod
    def headers(self) -> Any: ...

class ABCRecordBatchBuilder(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def append(self, offset: Any, timestamp: Any, key: Any, value: Any, headers: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def size_in_bytes(self, offset: Any, timestamp: Any, key: Any, value: Any, headers: Any) -> Any: ...
    @abc.abstractmethod
    def build(self) -> Any: ...

class ABCRecordBatch(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def __iter__(self) -> Any: ...

class ABCRecords(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def __init__(self, buffer: Any) -> None: ...
    @abc.abstractmethod
    def size_in_bytes(self) -> Any: ...
    @abc.abstractmethod
    def next_batch(self) -> Any: ...
    @abc.abstractmethod
    def has_next(self) -> Any: ...
