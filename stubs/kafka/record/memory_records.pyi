from kafka.errors import CorruptRecordException as CorruptRecordException
from kafka.record.abc import ABCRecords as ABCRecords
from kafka.record.default_records import DefaultRecordBatch as DefaultRecordBatch, DefaultRecordBatchBuilder as DefaultRecordBatchBuilder
from kafka.record.legacy_records import LegacyRecordBatch as LegacyRecordBatch, LegacyRecordBatchBuilder as LegacyRecordBatchBuilder
from typing import Any

class MemoryRecords(ABCRecords):
    LENGTH_OFFSET: Any = ...
    LOG_OVERHEAD: Any = ...
    MAGIC_OFFSET: Any = ...
    MIN_SLICE: Any = ...
    def __init__(self, bytes_data: Any) -> None: ...
    def size_in_bytes(self): ...
    def valid_bytes(self): ...
    def has_next(self): ...
    def next_batch(self, _min_slice: Any = ..., _magic_offset: Any = ...): ...

class MemoryRecordsBuilder:
    def __init__(self, magic: Any, compression_type: Any, batch_size: Any) -> None: ...
    def append(self, timestamp: Any, key: Any, value: Any, headers: Any = ...): ...
    def close(self) -> None: ...
    def size_in_bytes(self): ...
    def compression_rate(self): ...
    def is_full(self): ...
    def next_offset(self): ...
    def buffer(self): ...
