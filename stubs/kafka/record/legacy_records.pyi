from kafka.codec import gzip_decode as gzip_decode, gzip_encode as gzip_encode, lz4_decode as lz4_decode, lz4_decode_old_kafka as lz4_decode_old_kafka, lz4_encode as lz4_encode, lz4_encode_old_kafka as lz4_encode_old_kafka, snappy_decode as snappy_decode, snappy_encode as snappy_encode
from kafka.errors import CorruptRecordException as CorruptRecordException, UnsupportedCodecError as UnsupportedCodecError
from kafka.record.abc import ABCRecord as ABCRecord, ABCRecordBatch as ABCRecordBatch, ABCRecordBatchBuilder as ABCRecordBatchBuilder
from kafka.record.util import calc_crc32 as calc_crc32
from typing import Any, Optional

class LegacyRecordBase:
    HEADER_STRUCT_V0: Any = ...
    HEADER_STRUCT_V1: Any = ...
    LOG_OVERHEAD: Any = ...
    CRC_OFFSET: Any = ...
    MAGIC_OFFSET: Any = ...
    RECORD_OVERHEAD_V0: Any = ...
    RECORD_OVERHEAD_V1: Any = ...
    KEY_OFFSET_V0: Any = ...
    KEY_OFFSET_V1: Any = ...
    KEY_LENGTH: Any = ...
    VALUE_LENGTH: Any = ...
    CODEC_MASK: int = ...
    CODEC_NONE: int = ...
    CODEC_GZIP: int = ...
    CODEC_SNAPPY: int = ...
    CODEC_LZ4: int = ...
    TIMESTAMP_TYPE_MASK: int = ...
    LOG_APPEND_TIME: int = ...
    CREATE_TIME: int = ...
    NO_TIMESTAMP: int = ...

class LegacyRecordBatch(ABCRecordBatch, LegacyRecordBase):
    def __init__(self, buffer: Any, magic: Any) -> None: ...
    @property
    def timestamp_type(self): ...
    @property
    def compression_type(self): ...
    def validate_crc(self): ...
    def __iter__(self) -> Any: ...

class LegacyRecord(ABCRecord):
    def __init__(self, offset: Any, timestamp: Any, timestamp_type: Any, key: Any, value: Any, crc: Any) -> None: ...
    @property
    def offset(self): ...
    @property
    def timestamp(self): ...
    @property
    def timestamp_type(self): ...
    @property
    def key(self): ...
    @property
    def value(self): ...
    @property
    def headers(self): ...
    @property
    def checksum(self): ...

class LegacyRecordBatchBuilder(ABCRecordBatchBuilder, LegacyRecordBase):
    def __init__(self, magic: Any, compression_type: Any, batch_size: Any) -> None: ...
    def append(self, offset: Any, timestamp: Any, key: Any, value: Any, headers: Optional[Any] = ...): ...
    def build(self): ...
    def size(self): ...
    def size_in_bytes(self, offset: Any, timestamp: Any, key: Any, value: Any, headers: Optional[Any] = ...): ...
    @classmethod
    def record_size(cls, magic: Any, key: Any, value: Any): ...
    @classmethod
    def record_overhead(cls, magic: Any): ...
    @classmethod
    def estimate_size_in_bytes(cls, magic: Any, compression_type: Any, key: Any, value: Any): ...

class LegacyRecordMetadata:
    def __init__(self, offset: Any, crc: Any, size: Any, timestamp: Any) -> None: ...
    @property
    def offset(self): ...
    @property
    def crc(self): ...
    @property
    def size(self): ...
    @property
    def timestamp(self): ...
