from . import ConfigResourceType as ConfigResourceType
from kafka.admin.acl_resource import ACL as ACL, ACLFilter as ACLFilter, ACLOperation as ACLOperation, ACLPermissionType as ACLPermissionType, ACLResourcePatternType as ACLResourcePatternType, ResourcePattern as ResourcePattern, ResourceType as ResourceType
from kafka.client_async import KafkaClient as KafkaClient
from kafka.errors import IllegalArgumentError as IllegalArgumentError, IncompatibleBrokerVersion as IncompatibleBrokerVersion, KafkaConfigurationError as KafkaConfigurationError, NotControllerError as NotControllerError, UnrecognizedBrokerVersion as UnrecognizedBrokerVersion
from kafka.metrics import MetricConfig as MetricConfig, Metrics as Metrics
from kafka.protocol.admin import AlterConfigsRequest as AlterConfigsRequest, CreateAclsRequest as CreateAclsRequest, CreatePartitionsRequest as CreatePartitionsRequest, CreateTopicsRequest as CreateTopicsRequest, DeleteAclsRequest as DeleteAclsRequest, DeleteTopicsRequest as DeleteTopicsRequest, DescribeAclsRequest as DescribeAclsRequest, DescribeConfigsRequest as DescribeConfigsRequest, DescribeGroupsRequest as DescribeGroupsRequest, ListGroupsRequest as ListGroupsRequest
from kafka.protocol.commit import GroupCoordinatorRequest as GroupCoordinatorRequest, OffsetFetchRequest as OffsetFetchRequest
from kafka.protocol.metadata import MetadataRequest as MetadataRequest
from kafka.structs import OffsetAndMetadata as OffsetAndMetadata, TopicPartition as TopicPartition
from typing import Any, Optional

log: Any

class KafkaAdminClient:
    DEFAULT_CONFIG: Any = ...
    config: Any = ...
    def __init__(self, **configs: Any) -> None: ...
    def close(self) -> None: ...
    def create_topics(self, new_topics: Any, timeout_ms: Optional[Any] = ..., validate_only: bool = ...): ...
    def delete_topics(self, topics: Any, timeout_ms: Optional[Any] = ...): ...
    def list_topics(self): ...
    def describe_topics(self, topics: Optional[Any] = ...): ...
    def describe_cluster(self): ...
    def describe_acls(self, acl_filter: Any): ...
    def create_acls(self, acls: Any): ...
    def delete_acls(self, acl_filters: Any): ...
    def describe_configs(self, config_resources: Any, include_synonyms: bool = ...): ...
    def alter_configs(self, config_resources: Any): ...
    def create_partitions(self, topic_partitions: Any, timeout_ms: Optional[Any] = ..., validate_only: bool = ...): ...
    def describe_consumer_groups(self, group_ids: Any, group_coordinator_id: Optional[Any] = ..., include_authorized_operations: bool = ...): ...
    def list_consumer_groups(self, broker_ids: Optional[Any] = ...): ...
    def list_consumer_group_offsets(self, group_id: Any, group_coordinator_id: Optional[Any] = ..., partitions: Optional[Any] = ...): ...
