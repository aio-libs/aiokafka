from kafka.errors import IllegalArgumentError as IllegalArgumentError
from kafka.vendor.enum34 import IntEnum as IntEnum
from typing import Any

class ResourceType(IntEnum):
    UNKNOWN: Any = ...
    ANY: Any = ...
    CLUSTER: Any = ...
    DELEGATION_TOKEN: Any = ...
    GROUP: Any = ...
    TOPIC: Any = ...
    TRANSACTIONAL_ID: int = ...

class ACLOperation(IntEnum):
    ANY: Any = ...
    ALL: Any = ...
    READ: Any = ...
    WRITE: Any = ...
    CREATE: Any = ...
    DELETE: Any = ...
    ALTER: Any = ...
    DESCRIBE: Any = ...
    CLUSTER_ACTION: Any = ...
    DESCRIBE_CONFIGS: Any = ...
    ALTER_CONFIGS: Any = ...
    IDEMPOTENT_WRITE: int = ...

class ACLPermissionType(IntEnum):
    ANY: Any = ...
    DENY: Any = ...
    ALLOW: int = ...

class ACLResourcePatternType(IntEnum):
    ANY: Any = ...
    MATCH: Any = ...
    LITERAL: Any = ...
    PREFIXED: int = ...

class ACLFilter:
    principal: Any = ...
    host: Any = ...
    operation: Any = ...
    permission_type: Any = ...
    resource_pattern: Any = ...
    def __init__(self, principal: Any, host: Any, operation: Any, permission_type: Any, resource_pattern: Any) -> None: ...
    def validate(self) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class ACL(ACLFilter):
    def __init__(self, principal: Any, host: Any, operation: Any, permission_type: Any, resource_pattern: Any) -> None: ...
    def validate(self) -> None: ...

class ResourcePatternFilter:
    resource_type: Any = ...
    resource_name: Any = ...
    pattern_type: Any = ...
    def __init__(self, resource_type: Any, resource_name: Any, pattern_type: Any) -> None: ...
    def validate(self) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class ResourcePattern(ResourcePatternFilter):
    def __init__(self, resource_type: Any, resource_name: Any, pattern_type: Any = ...) -> None: ...
    def validate(self) -> None: ...
