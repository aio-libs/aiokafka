import ssl
from kafka.future import Future as Future
from kafka.metrics.stats import Avg as Avg, Count as Count, Max as Max, Rate as Rate
from kafka.oauth.abstract import AbstractTokenProvider as AbstractTokenProvider
from kafka.protocol.admin import SaslHandShakeRequest as SaslHandShakeRequest
from kafka.protocol.commit import OffsetFetchRequest as OffsetFetchRequest
from kafka.protocol.metadata import MetadataRequest as MetadataRequest
from kafka.protocol.parser import KafkaProtocol as KafkaProtocol
from kafka.protocol.types import Int32 as Int32, Int8 as Int8
from kafka.scram import ScramClient as ScramClient
from typing import Any, Optional

log: Any
DEFAULT_KAFKA_PORT: int
SASL_QOP_AUTH: int
SASL_QOP_AUTH_INT: int
SASL_QOP_AUTH_CONF: int
ssl_available: bool

class SSLWantReadError(Exception): ...
class SSLWantWriteError(Exception): ...

AFI_NAMES: Any

class ConnectionStates:
    DISCONNECTING: str = ...
    DISCONNECTED: str = ...
    CONNECTING: str = ...
    HANDSHAKE: str = ...
    CONNECTED: str = ...
    AUTHENTICATING: str = ...

class BrokerConnection:
    DEFAULT_CONFIG: Any = ...
    SECURITY_PROTOCOLS: Any = ...
    SASL_MECHANISMS: Any = ...
    host: Any = ...
    port: Any = ...
    afi: Any = ...
    config: Any = ...
    node_id: Any = ...
    in_flight_requests: Any = ...
    state: Any = ...
    last_attempt: int = ...
    def __init__(self, host: Any, port: Any, afi: Any, **configs: Any) -> None: ...
    def connect_blocking(self, timeout: Any = ...): ...
    def connect(self): ...
    def blacked_out(self): ...
    def connection_delay(self): ...
    def connected(self): ...
    def connecting(self): ...
    def disconnected(self): ...
    def __del__(self) -> None: ...
    def close(self, error: Optional[Any] = ...) -> None: ...
    def send(self, request: Any, blocking: bool = ...): ...
    def send_pending_requests(self): ...
    def send_pending_requests_v2(self): ...
    def can_send_more(self): ...
    def recv(self): ...
    def requests_timed_out(self): ...
    def get_api_versions(self): ...
    def check_version(self, timeout: int = ..., strict: bool = ..., topics: Any = ...): ...

class BrokerConnectionMetrics:
    metrics: Any = ...
    bytes_sent: Any = ...
    bytes_received: Any = ...
    request_time: Any = ...
    def __init__(self, metrics: Any, metric_group_prefix: Any, node_id: Any) -> None: ...

def get_ip_port_afi(host_and_port_str: Any): ...
def collect_hosts(hosts: Any, randomize: bool = ...): ...
def is_inet_4_or_6(gai: Any): ...
def dns_lookup(host: Any, port: Any, afi: Any = ...): ...
