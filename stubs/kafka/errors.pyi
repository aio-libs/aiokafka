from typing import Any

class KafkaError(RuntimeError):
    retriable: bool
    invalid_metadata: bool

class IllegalStateError(KafkaError): ...
class IllegalArgumentError(KafkaError): ...
class NoBrokersAvailable(KafkaError): ...
class NodeNotReadyError(KafkaError): ...
class KafkaProtocolError(KafkaError): ...
class CorrelationIdError(KafkaProtocolError): ...
class Cancelled(KafkaError): ...
class TooManyInFlightRequests(KafkaError): ...
class StaleMetadata(KafkaError): ...
class MetadataEmptyBrokerList(KafkaError): ...
class UnrecognizedBrokerVersion(KafkaError): ...
class IncompatibleBrokerVersion(KafkaError): ...

class CommitFailedError(KafkaError):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class AuthenticationMethodNotSupported(KafkaError): ...
class AuthenticationFailedError(KafkaError): ...

class BrokerResponseError(KafkaError):
    errno: int
    message: str
    description: str

class NoError(BrokerResponseError): ...
class UnknownError(BrokerResponseError): ...
class OffsetOutOfRangeError(BrokerResponseError): ...
class CorruptRecordException(BrokerResponseError): ...

InvalidMessageError = CorruptRecordException

class UnknownTopicOrPartitionError(BrokerResponseError): ...
class InvalidFetchRequestError(BrokerResponseError): ...
class LeaderNotAvailableError(BrokerResponseError): ...
class NotLeaderForPartitionError(BrokerResponseError): ...
class RequestTimedOutError(BrokerResponseError): ...
class BrokerNotAvailableError(BrokerResponseError): ...
class ReplicaNotAvailableError(BrokerResponseError): ...
class MessageSizeTooLargeError(BrokerResponseError): ...
class StaleControllerEpochError(BrokerResponseError): ...
class OffsetMetadataTooLargeError(BrokerResponseError): ...
class StaleLeaderEpochCodeError(BrokerResponseError): ...
class GroupLoadInProgressError(BrokerResponseError): ...
class GroupCoordinatorNotAvailableError(BrokerResponseError): ...
class NotCoordinatorForGroupError(BrokerResponseError): ...
class InvalidTopicError(BrokerResponseError): ...
class RecordListTooLargeError(BrokerResponseError): ...
class NotEnoughReplicasError(BrokerResponseError): ...
class NotEnoughReplicasAfterAppendError(BrokerResponseError): ...
class InvalidRequiredAcksError(BrokerResponseError): ...
class IllegalGenerationError(BrokerResponseError): ...
class InconsistentGroupProtocolError(BrokerResponseError): ...
class InvalidGroupIdError(BrokerResponseError): ...
class UnknownMemberIdError(BrokerResponseError): ...
class InvalidSessionTimeoutError(BrokerResponseError): ...
class RebalanceInProgressError(BrokerResponseError): ...
class InvalidCommitOffsetSizeError(BrokerResponseError): ...
class TopicAuthorizationFailedError(BrokerResponseError): ...
class GroupAuthorizationFailedError(BrokerResponseError): ...
class ClusterAuthorizationFailedError(BrokerResponseError): ...
class InvalidTimestampError(BrokerResponseError): ...
class UnsupportedSaslMechanismError(BrokerResponseError): ...
class IllegalSaslStateError(BrokerResponseError): ...
class UnsupportedVersionError(BrokerResponseError): ...
class TopicAlreadyExistsError(BrokerResponseError): ...
class InvalidPartitionsError(BrokerResponseError): ...
class InvalidReplicationFactorError(BrokerResponseError): ...
class InvalidReplicationAssignmentError(BrokerResponseError): ...
class InvalidConfigurationError(BrokerResponseError): ...
class NotControllerError(BrokerResponseError): ...
class InvalidRequestError(BrokerResponseError): ...
class UnsupportedForMessageFormatError(BrokerResponseError): ...
class PolicyViolationError(BrokerResponseError): ...
class SecurityDisabledError(BrokerResponseError): ...
class NonEmptyGroupError(BrokerResponseError): ...
class GroupIdNotFoundError(BrokerResponseError): ...
class KafkaUnavailableError(KafkaError): ...
class KafkaTimeoutError(KafkaError): ...

# class FailedPayloadsError(KafkaError):
#     payload: Incomplete
#     def __init__(self, payload, *args) -> None: ...

class KafkaConnectionError(KafkaError): ...
class ProtocolError(KafkaError): ...
class UnsupportedCodecError(KafkaError): ...
class KafkaConfigurationError(KafkaError): ...
class QuotaViolationError(KafkaError): ...
