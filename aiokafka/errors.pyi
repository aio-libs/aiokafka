from typing import Any, TypeVar

__all__ = [
    "ConsumerStoppedError",
    "NoOffsetForPartitionError",
    "RecordTooLargeError",
    "ProducerClosed",
    "KafkaError",
    "IllegalStateError",
    "IllegalArgumentError",
    "NoBrokersAvailable",
    "NodeNotReadyError",
    "KafkaProtocolError",
    "CorrelationIdError",
    "Cancelled",
    "TooManyInFlightRequests",
    "StaleMetadata",
    "UnrecognizedBrokerVersion",
    "IncompatibleBrokerVersion",
    "CommitFailedError",
    "AuthenticationMethodNotSupported",
    "AuthenticationFailedError",
    "BrokerResponseError",
    "NoError",
    "UnknownError",
    "OffsetOutOfRangeError",
    "CorruptRecordException",
    "UnknownTopicOrPartitionError",
    "InvalidFetchRequestError",
    "LeaderNotAvailableError",
    "NotLeaderForPartitionError",
    "RequestTimedOutError",
    "BrokerNotAvailableError",
    "ReplicaNotAvailableError",
    "MessageSizeTooLargeError",
    "StaleControllerEpochError",
    "OffsetMetadataTooLargeError",
    "StaleLeaderEpochCodeError",
    "GroupLoadInProgressError",
    "GroupCoordinatorNotAvailableError",
    "NotCoordinatorForGroupError",
    "InvalidTopicError",
    "RecordListTooLargeError",
    "NotEnoughReplicasError",
    "NotEnoughReplicasAfterAppendError",
    "InvalidRequiredAcksError",
    "IllegalGenerationError",
    "InconsistentGroupProtocolError",
    "InvalidGroupIdError",
    "UnknownMemberIdError",
    "InvalidSessionTimeoutError",
    "RebalanceInProgressError",
    "InvalidCommitOffsetSizeError",
    "TopicAuthorizationFailedError",
    "GroupAuthorizationFailedError",
    "ClusterAuthorizationFailedError",
    "InvalidTimestampError",
    "UnsupportedSaslMechanismError",
    "IllegalSaslStateError",
    "UnsupportedVersionError",
    "TopicAlreadyExistsError",
    "InvalidPartitionsError",
    "InvalidReplicationFactorError",
    "InvalidReplicationAssignmentError",
    "InvalidConfigurationError",
    "NotControllerError",
    "InvalidRequestError",
    "UnsupportedForMessageFormatError",
    "PolicyViolationError",
    "KafkaUnavailableError",
    "KafkaTimeoutError",
    "KafkaConnectionError",
    "UnsupportedCodecError",
]

class KafkaError(RuntimeError):
    retriable: bool = ...
    invalid_metadata: bool = ...
    def __str__(self) -> str: ...

class IllegalStateError(KafkaError): ...
class IllegalArgumentError(KafkaError): ...
class NoBrokersAvailable(KafkaError): ...
class NodeNotReadyError(KafkaError): ...
class KafkaProtocolError(KafkaError): ...
class CorrelationIdError(KafkaProtocolError): ...
class Cancelled(KafkaError): ...
class TooManyInFlightRequests(KafkaError): ...
class StaleMetadata(KafkaError): ...
class MetadataEmptyBrokerList(KafkaError): ...
class UnrecognizedBrokerVersion(KafkaError): ...
class IncompatibleBrokerVersion(KafkaError): ...

class CommitFailedError(KafkaError):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class AuthenticationMethodNotSupported(KafkaError): ...
class AuthenticationFailedError(KafkaError): ...
class KafkaUnavailableError(KafkaError): ...
class KafkaTimeoutError(KafkaError): ...
class KafkaConnectionError(KafkaError): ...
class UnsupportedCodecError(KafkaError): ...
class KafkaConfigurationError(KafkaError): ...
class QuotaViolationError(KafkaError): ...

class ConsumerStoppedError(Exception):
    """Raised on `get*` methods of Consumer if it's cancelled, even pending
    ones.
    """

class IllegalOperation(Exception):
    """Raised if you try to execute an operation, that is not available with
    current configuration. For example trying to commit if no group_id was
    given.
    """

class NoOffsetForPartitionError(KafkaError): ...
class RecordTooLargeError(KafkaError): ...
class ProducerClosed(KafkaError): ...

class ProducerFenced(KafkaError):
    """Another producer with the same transactional ID went online.
    NOTE: As it seems this will be raised by Broker if transaction timeout
    occurred also.
    """

    def __init__(self, msg: str = ...) -> None: ...

class BrokerResponseError(KafkaError):
    def __str__(self) -> str:
        """Add errno to standard KafkaError str"""

class NoError(BrokerResponseError): ...
class UnknownError(BrokerResponseError): ...
class OffsetOutOfRangeError(BrokerResponseError): ...
class CorruptRecordException(BrokerResponseError): ...

InvalidMessageError = CorruptRecordException

class UnknownTopicOrPartitionError(BrokerResponseError): ...
class InvalidFetchRequestError(BrokerResponseError): ...
class LeaderNotAvailableError(BrokerResponseError): ...
class NotLeaderForPartitionError(BrokerResponseError): ...
class RequestTimedOutError(BrokerResponseError): ...
class BrokerNotAvailableError(BrokerResponseError): ...
class ReplicaNotAvailableError(BrokerResponseError): ...
class MessageSizeTooLargeError(BrokerResponseError): ...
class StaleControllerEpochError(BrokerResponseError): ...
class OffsetMetadataTooLargeError(BrokerResponseError): ...
class StaleLeaderEpochCodeError(BrokerResponseError): ...
class GroupLoadInProgressError(BrokerResponseError): ...

CoordinatorLoadInProgressError = GroupLoadInProgressError

class GroupCoordinatorNotAvailableError(BrokerResponseError): ...

CoordinatorNotAvailableError = GroupCoordinatorNotAvailableError

class NotCoordinatorForGroupError(BrokerResponseError): ...

NotCoordinatorError = NotCoordinatorForGroupError

class InvalidTopicError(BrokerResponseError): ...
class RecordListTooLargeError(BrokerResponseError): ...
class NotEnoughReplicasError(BrokerResponseError): ...
class NotEnoughReplicasAfterAppendError(BrokerResponseError): ...
class InvalidRequiredAcksError(BrokerResponseError): ...
class IllegalGenerationError(BrokerResponseError): ...
class InconsistentGroupProtocolError(BrokerResponseError): ...
class InvalidGroupIdError(BrokerResponseError): ...
class UnknownMemberIdError(BrokerResponseError): ...
class InvalidSessionTimeoutError(BrokerResponseError): ...
class RebalanceInProgressError(BrokerResponseError): ...
class InvalidCommitOffsetSizeError(BrokerResponseError): ...
class TopicAuthorizationFailedError(BrokerResponseError): ...
class GroupAuthorizationFailedError(BrokerResponseError): ...
class ClusterAuthorizationFailedError(BrokerResponseError): ...
class InvalidTimestampError(BrokerResponseError): ...
class UnsupportedSaslMechanismError(BrokerResponseError): ...
class IllegalSaslStateError(BrokerResponseError): ...
class UnsupportedVersionError(BrokerResponseError): ...
class TopicAlreadyExistsError(BrokerResponseError): ...
class InvalidPartitionsError(BrokerResponseError): ...
class InvalidReplicationFactorError(BrokerResponseError): ...
class InvalidReplicationAssignmentError(BrokerResponseError): ...
class InvalidConfigurationError(BrokerResponseError): ...
class NotControllerError(BrokerResponseError): ...
class InvalidRequestError(BrokerResponseError): ...
class UnsupportedForMessageFormatError(BrokerResponseError): ...
class PolicyViolationError(BrokerResponseError): ...
class OutOfOrderSequenceNumber(BrokerResponseError): ...
class DuplicateSequenceNumber(BrokerResponseError): ...
class InvalidProducerEpoch(BrokerResponseError): ...
class InvalidTxnState(BrokerResponseError): ...
class InvalidProducerIdMapping(BrokerResponseError): ...
class InvalidTransactionTimeout(BrokerResponseError): ...
class ConcurrentTransactions(BrokerResponseError): ...
class TransactionCoordinatorFenced(BrokerResponseError): ...
class TransactionalIdAuthorizationFailed(BrokerResponseError):  ...
class SecurityDisabled(BrokerResponseError): ...
class OperationNotAttempted(BrokerResponseError): ...
class KafkaStorageError(BrokerResponseError): ...
class LogDirNotFound(BrokerResponseError): ...
class SaslAuthenticationFailed(BrokerResponseError): ...
class UnknownProducerId(BrokerResponseError): ...
class ReassignmentInProgress(BrokerResponseError): ...
class DelegationTokenAuthDisabled(BrokerResponseError): ...
class DelegationTokenNotFound(BrokerResponseError): ...
class DelegationTokenOwnerMismatch(BrokerResponseError): ...
class DelegationTokenRequestNotAllowed(BrokerResponseError): ...
class DelegationTokenAuthorizationFailed(BrokerResponseError): ...
class DelegationTokenExpired(BrokerResponseError): ...
class InvalidPrincipalType(BrokerResponseError): ...
class NonEmptyGroup(BrokerResponseError): ...
class GroupIdNotFound(BrokerResponseError): ...
class FetchSessionIdNotFound(BrokerResponseError): ...
class InvalidFetchSessionEpoch(BrokerResponseError): ...
class ListenerNotFound(BrokerResponseError): ...
class MemberIdRequired(BrokerResponseError): ...

_T = TypeVar("_T", bound=type)
kafka_errors = ...

def for_code(error_code: int) -> type[BrokerResponseError]: ...
